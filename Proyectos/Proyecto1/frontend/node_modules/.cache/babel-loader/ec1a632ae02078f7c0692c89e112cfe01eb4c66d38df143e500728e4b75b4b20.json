{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import{DataSet,Network}from\"vis-network/standalone/umd/vis-network.min\";import{jsx as _jsx}from\"react/jsx-runtime\";const State=_ref=>{let{action}=_ref;const containerRef=useRef(null);let networkRef=useRef(null);const nodes=useRef(null);const edges=useRef(null);useEffect(()=>{// Define los nodos \nnodes.current=new DataSet([]);// Define las aristas\nedges.current=new DataSet([]);// Crea una instancia de la red\nconst container=containerRef.current;const data={nodes:nodes.current,edges:edges.current};const options={layout:{hierarchical:{direction:'LR'}},edges:{smooth:{type:'curvedCCW'}}};networkRef.current=new Network(container,data,options);// Limpia el diagrama cuando se desmonta el componente\nreturn()=>{if(networkRef.current){networkRef.current.destroy();}};},[]);useEffect(()=>{// Si la accion es start se borra el diagrama y se agregan los nodos\nif(action==='start'){nodes.current.clear();nodes.current.add([{id:1,label:'New',color:'gray'},{id:2,label:'Ready',color:'gray'},{id:3,label:'Running',color:'green'}]);// Se agregan las aristas\nedges.current.clear();edges.current.add({from:1,to:2,arrows:{to:{enabled:true,type:'arrow'}}});edges.current.add({from:2,to:3,arrows:{to:{enabled:true,type:'arrow'}}});}//actualiza el color del nodo 'Running'\nif(action==='stop'||action==='resume'){const runningNode=nodes.current.get(3);if(runningNode){runningNode.color=action==='stop'?'red':'green';nodes.current.update(runningNode);}}// añade una arista de running a ready cuando se recibe stop\nif(action==='stop'){// Agrega una nueva arista de 'Running' a 'Ready'\nedges.current.add({from:3,to:2,arrows:{to:{enabled:true,type:'arrow'}}});// Actualiza el color del nodo 'Ready' a verde\nconst readyNode=nodes.current.get(2);if(readyNode){readyNode.color='green';nodes.current.update(readyNode);}}// elimina la arista de running a ready cuando se recibe resume\nif(action==='resume'){// Busca la arista existente de 'Running' a 'Ready'\nconst existingEdge=edges.current.get().find(edge=>edge.from===3&&edge.to===2);if(existingEdge){// Elimina la arista existente de 'Running' a 'Ready'\nedges.current.remove(existingEdge.id);// Agrega una nueva arista de 'Ready' a 'Running'\n//edges.current.add({ from: 2, to: 3, arrows: { to: { enabled: true, type: 'arrow' } } });\n}// Actualiza el color del nodo 'Ready' a gris\nconst readyNode=nodes.current.get(2);if(readyNode){readyNode.color='gray';nodes.current.update(readyNode);}}// elimina la arista de running a ready  cuando se recibe kill\nif(action==='kill'){let targetNode;// Verifica el color del nodo 'Ready'\nconst readyNode=nodes.current.get(2);if(readyNode&&readyNode.color==='green'){targetNode=2;// Si el nodo 'Ready' está en verde, este será el nodo objetivo\n}// Si el nodo 'Ready' no está en verde, verifica el color del nodo 'Running'\nelse{const runningNode=nodes.current.get(3);if(runningNode&&runningNode.color==='green'){targetNode=3;// Si el nodo 'Running' está en verde, este será el nodo objetivo\n}}// Todos los nodos se ponen en azul\nnodes.current.forEach(node=>{node.color='gray';nodes.current.update(node);});// Se agrega el nodo 'Terminated'\nnodes.current.add({id:4,label:'Terminated',color:'orange'});// Si se identificó un nodo objetivo, se crea la arista de ese nodo al nodo 'Terminated'\nif(targetNode){edges.current.add({from:targetNode,to:4,arrows:{to:{enabled:true,type:'arrow'}}});}}},[action]);return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{ref:containerRef,style:{width:'100%',height:'550px'}})});};export default State;","map":{"version":3,"names":["React","useEffect","useRef","DataSet","Network","jsx","_jsx","State","_ref","action","containerRef","networkRef","nodes","edges","current","container","data","options","layout","hierarchical","direction","smooth","type","destroy","clear","add","id","label","color","from","to","arrows","enabled","runningNode","get","update","readyNode","existingEdge","find","edge","remove","targetNode","forEach","node","children","ref","style","width","height"],"sources":["/home/josep/USAC/7mo_Semestre/Sistemas_operativos_1/Laboratorio/Repositorio/SO1_1S2024_202111478/Proyectos/Proyecto1/frontend/src/components/state.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { DataSet, Network } from \"vis-network/standalone/umd/vis-network.min\";\n\nconst State = ({ action }) => {\n    const containerRef = useRef(null);\n    let networkRef = useRef(null);\n    const nodes = useRef(null);\n    const edges = useRef(null);\n\n    useEffect(() => {\n        // Define los nodos \n        nodes.current = new DataSet([]);\n\n        // Define las aristas\n        edges.current = new DataSet([]);\n\n        // Crea una instancia de la red\n        const container = containerRef.current;\n        const data = {\n            nodes: nodes.current,\n            edges: edges.current\n        };\n        const options = {\n            layout: {\n                hierarchical: {\n                    direction: 'LR'\n                }\n            },\n            edges:{\n                smooth:{\n                    type: 'curvedCCW'\n                }\n            }\n        };\n        networkRef.current = new Network(container, data, options);\n\n        // Limpia el diagrama cuando se desmonta el componente\n        return () => {\n            if (networkRef.current) {\n                networkRef.current.destroy();\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n\n\n        // Si la accion es start se borra el diagrama y se agregan los nodos\n        if (action === 'start') {\n            nodes.current.clear();\n            nodes.current.add([\n                { id: 1, label: 'New', color: 'gray' },\n                { id: 2, label: 'Ready', color: 'gray' },\n                { id: 3, label: 'Running', color: 'green' }\n            ]);\n            // Se agregan las aristas\n            edges.current.clear();\n            edges.current.add({ from: 1, to: 2, arrows: { to: { enabled: true, type: 'arrow' } } });\n            edges.current.add({ from: 2, to: 3, arrows: { to: { enabled: true, type: 'arrow' } } });\n        }\n\n        //actualiza el color del nodo 'Running'\n        if (action === 'stop' || action === 'resume') {\n            const runningNode = nodes.current.get(3);\n            if (runningNode) {\n                runningNode.color = action === 'stop' ? 'red' : 'green';\n                nodes.current.update(runningNode);\n            }\n        }\n\n        // añade una arista de running a ready cuando se recibe stop\n        if (action === 'stop') {\n            // Agrega una nueva arista de 'Running' a 'Ready'\n            edges.current.add({ from: 3, to: 2, arrows: { to: { enabled: true, type: 'arrow' } } });\n            \n\n            // Actualiza el color del nodo 'Ready' a verde\n            const readyNode = nodes.current.get(2);\n            if (readyNode) {\n                readyNode.color = 'green';\n                nodes.current.update(readyNode);\n            }\n        }\n\n        // elimina la arista de running a ready cuando se recibe resume\n        if (action === 'resume') {\n            // Busca la arista existente de 'Running' a 'Ready'\n            const existingEdge = edges.current.get().find(edge => edge.from === 3 && edge.to === 2);\n            if (existingEdge) {\n                // Elimina la arista existente de 'Running' a 'Ready'\n                edges.current.remove(existingEdge.id);\n\n                // Agrega una nueva arista de 'Ready' a 'Running'\n                //edges.current.add({ from: 2, to: 3, arrows: { to: { enabled: true, type: 'arrow' } } });\n            }\n\n            // Actualiza el color del nodo 'Ready' a gris\n            const readyNode = nodes.current.get(2);\n            if (readyNode) {\n                readyNode.color = 'gray';\n                nodes.current.update(readyNode);\n            }\n        }\n\n        // elimina la arista de running a ready  cuando se recibe kill\n        if (action === 'kill') {\n            let targetNode;\n            // Verifica el color del nodo 'Ready'\n            const readyNode = nodes.current.get(2);\n            if (readyNode && readyNode.color === 'green') {\n                targetNode = 2; // Si el nodo 'Ready' está en verde, este será el nodo objetivo\n            }\n            // Si el nodo 'Ready' no está en verde, verifica el color del nodo 'Running'\n            else {\n                const runningNode = nodes.current.get(3);\n                if (runningNode && runningNode.color === 'green') {\n                    targetNode = 3; // Si el nodo 'Running' está en verde, este será el nodo objetivo\n                }\n            }\n\n            // Todos los nodos se ponen en azul\n            nodes.current.forEach(node => {\n                node.color = 'gray';\n                nodes.current.update(node);\n            });\n\n            // Se agrega el nodo 'Terminated'\n            nodes.current.add({ id: 4, label: 'Terminated', color: 'orange' });\n\n            // Si se identificó un nodo objetivo, se crea la arista de ese nodo al nodo 'Terminated'\n            if (targetNode) {\n                edges.current.add({ from: targetNode, to: 4, arrows: { to: { enabled: true, type: 'arrow' } } });\n            }\n        }\n\n    }, [action]);\n\n    return (\n        <div>\n            <div ref={containerRef} style={{ width: '100%', height: '550px' }} ></div>\n        </div>\n    );\n}\n\nexport default State;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}