{"ast":null,"code":"import React,{useEffect,useState}from'react';import'bootstrap/dist/css/bootstrap.min.css';import'../css/processtree.css';import CardG from'../components/cardg';import ComboBox from'../components/combobox';import Tree from'../components/tree';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ProcessTree(){const[selectedOption,setSelectedOption]=useState(null);const[pidData,setPidData]=useState([]);const[treeData,setTreeData]=useState('');// Consultar el endpoint /processtree para obtener el array de PID disponibles\nuseEffect(()=>{fetchPidData();const interval=setInterval(fetchPidData,1000);return()=>clearInterval(interval);},[]);const fetchPidData=()=>{fetch('/api/processtree').then(response=>response.json()).then(data=>setPidData(data)).catch(error=>console.error('Error fetching PID options:',error));};// Consultar el endpoint /processtree/{pid} para obtener el arbol de procesos\nuseEffect(()=>{if(selectedOption){fetch(\"/api/processtree/?pid=\".concat(selectedOption)).then(response=>response.json()).then(data=>setTreeData(data)).catch(error=>console.error('Error fetching process tree:',error));}},[selectedOption]);const handleChange=event=>{setSelectedOption(event.target.value);};return/*#__PURE__*/_jsxs(\"div\",{className:\"Contain\",children:[/*#__PURE__*/_jsx(ComboBox,{options:pidData,onChange:handleChange,placeholder:\"Seleecione el PID padre\"}),/*#__PURE__*/_jsxs(CardG,{title:\"Tree View\",children:[treeData&&/*#__PURE__*/_jsx(Tree,{processData:treeData}),\" \"]})]});}export default ProcessTree;","map":{"version":3,"names":["React","useEffect","useState","CardG","ComboBox","Tree","jsx","_jsx","jsxs","_jsxs","ProcessTree","selectedOption","setSelectedOption","pidData","setPidData","treeData","setTreeData","fetchPidData","interval","setInterval","clearInterval","fetch","then","response","json","data","catch","error","console","concat","handleChange","event","target","value","className","children","options","onChange","placeholder","title","processData"],"sources":["/home/josep/USAC/7mo_Semestre/Sistemas_operativos_1/Laboratorio/Repositorio/SO1_1S2024_202111478/Proyectos/Proyecto1/frontend/src/pages/processtree.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../css/processtree.css';\nimport CardG from '../components/cardg';\nimport ComboBox from '../components/combobox';\nimport Tree from '../components/tree'\n\nfunction ProcessTree() {\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [pidData, setPidData] = useState([]);\n    const [treeData, setTreeData] = useState('');\n\n    // Consultar el endpoint /processtree para obtener el array de PID disponibles\n    useEffect(() => {\n        fetchPidData();\n        const interval = setInterval(fetchPidData, 1000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    const fetchPidData = () => {\n        fetch('/api/processtree')\n            .then(response => response.json())\n            .then(data => setPidData(data))\n            .catch(error => console.error('Error fetching PID options:', error));\n    }\n\n    // Consultar el endpoint /processtree/{pid} para obtener el arbol de procesos\n    useEffect(() => {\n        if (selectedOption) {\n            fetch(`/api/processtree/?pid=${selectedOption}`)\n                .then(response => response.json())\n                .then(data => setTreeData(data))\n                .catch(error => console.error('Error fetching process tree:', error));\n        }\n    }, [selectedOption]);\n\n    const handleChange = (event) => {\n        setSelectedOption(event.target.value);\n    }\n\n    return (\n        <div className='Contain'>\n            <ComboBox options={pidData} onChange={handleChange} placeholder={\"Seleecione el PID padre\"}></ComboBox>\n            <CardG title={\"Tree View\"}>\n                {treeData && <Tree processData={treeData}/>} {}\n            </CardG>\n        </div>\n    );\n}\n\nexport default ProcessTree;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,sCAAsC,CAC7C,MAAO,wBAAwB,CAC/B,MAAO,CAAAC,KAAK,KAAM,qBAAqB,CACvC,MAAO,CAAAC,QAAQ,KAAM,wBAAwB,CAC7C,MAAO,CAAAC,IAAI,KAAM,oBAAoB,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAErC,QAAS,CAAAC,WAAWA,CAAA,CAAG,CACnB,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACa,QAAQ,CAAEC,WAAW,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAE5C;AACAD,SAAS,CAAC,IAAM,CACZgB,YAAY,CAAC,CAAC,CACd,KAAM,CAAAC,QAAQ,CAAGC,WAAW,CAACF,YAAY,CAAE,IAAI,CAAC,CAEhD,MAAO,IAAMG,aAAa,CAACF,QAAQ,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAD,YAAY,CAAGA,CAAA,GAAM,CACvBI,KAAK,CAAC,kBAAkB,CAAC,CACpBC,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAIX,UAAU,CAACW,IAAI,CAAC,CAAC,CAC9BC,KAAK,CAACC,KAAK,EAAIC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CAAC,CAC5E,CAAC,CAED;AACA1B,SAAS,CAAC,IAAM,CACZ,GAAIU,cAAc,CAAE,CAChBU,KAAK,0BAAAQ,MAAA,CAA0BlB,cAAc,CAAE,CAAC,CAC3CW,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,EAAIT,WAAW,CAACS,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAACC,KAAK,EAAIC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CAAC,CAC7E,CACJ,CAAC,CAAE,CAAChB,cAAc,CAAC,CAAC,CAEpB,KAAM,CAAAmB,YAAY,CAAIC,KAAK,EAAK,CAC5BnB,iBAAiB,CAACmB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CACzC,CAAC,CAED,mBACIxB,KAAA,QAAKyB,SAAS,CAAC,SAAS,CAAAC,QAAA,eACpB5B,IAAA,CAACH,QAAQ,EAACgC,OAAO,CAAEvB,OAAQ,CAACwB,QAAQ,CAAEP,YAAa,CAACQ,WAAW,CAAE,yBAA0B,CAAW,CAAC,cACvG7B,KAAA,CAACN,KAAK,EAACoC,KAAK,CAAE,WAAY,CAAAJ,QAAA,EACrBpB,QAAQ,eAAIR,IAAA,CAACF,IAAI,EAACmC,WAAW,CAAEzB,QAAS,CAAC,CAAC,CAAC,GAAC,EAC1C,CAAC,EACP,CAAC,CAEd,CAEA,cAAe,CAAAL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}